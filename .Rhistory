library(shiny)
library(DT)
dat <- data.frame(
country = c('USA', 'China'),
flag = c('<img src="test.png" height="52"></img>',
'<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Flag_of_the_People%27s_Republic_of_China.svg/200px-Flag_of_the_People%27s_Republic_of_China.svg.png" height="52"></img>'
)
)
server <- function(input, output){
output$mytable <- DT::renderDataTable({
DT::datatable(dat, escape = FALSE) # HERE
})
}
runApp(ui,server)
server <- function(input, output){
output$mytable <- DT::renderDataTable({
DT::datatable(dat, escape = FALSE) # HERE
})
}
runApp(ui,server)
runApp(ui,server())
devtools::install_github("glin/reactable")
runApp()
shinyApp(ui, server)
source('~/app.R')
runApp('~')
runApp('~')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(RColorBrewer)
display.brewer.all()
brewer.pal(9,"Reds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
brewer.pal(9,"Blues")
runApp()
runApp()
brewer.pal(9,"YLOrBr")
brewer.pal(9,"YlOrBr")
runApp()
brewer.pal(9,"Greens")
runApp()
runApp()
runApp()
runApp()
View(evolution)
runApp()
runApp()
str(evolution)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(RColorBrewer)
display.brewer.all()
runApp()
runApp()
runApp()
runApp()
runApp()
options(repr.plot.width = 4, repr.plot.height = 10)
dataAtDate(max_date) %>% filter(CONFIRMES>=100) %>%
ggplot(aes(x=taux_gueri, y=taux_death, label=`Country/Region`))+
geom_point()+
geom_text(aes(color=factor(class)), size=4)+
scale_colour_manual(values=c("orange", "red", "green","blue"), name="Legend")+
theme_bw() +
theme(legend.position="bottom",
panel.background = element_rect(fill = "black",colour = NA),
plot.background = element_rect(fill = "black",colour = NA),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
text = element_text(size = 12), element_line(size = 0.4)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1709+177
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("shinycssloaders")
runApp()
runApp()
if (!dir_exists("data")) {
dir.create('data')
downloadGithubData()
} else if ((!file.exists("data/conf.csv")) || (as.double(Sys.time() - file_info("data/conf.csv")$change_time, units = "hours") > 1)) {
downloadGithubData()
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
zone_confirmes <- read_csv("data/zone_confirmes.csv")
View(zone_confirmes)
names(zone_confirmes)
names(manquant)
zone_confirmes$THIÈS <- zone_confirmes$THIÈS+zone_confirmes$DIAKHAO
zone_confirmes <- zone_confirmes %>% select(-DIAKHAO)
names(zone_confirmes)
names(manquant)
View(zone_confirmes)
runApp()
runApp()
View(zone_confirmes)
runApp()
zone_confirmes <- zone_confirmes %>% mutate(`THIÈS`=`THIÈS`+DIAKHAO)
runApp()
zone_confirmes <- read_csv("data/zone_confirmes.csv")
zone_confirmes <- zone_confirmes %>% mutate(`THIÈS`=`THIÈS`+DIAKHAO)
View(zone_confirmes)
runApp()
runApp()
runApp()
View(zone_confirmes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(RCurl)
library(readr)
library(dplyr)
coronavirus <- read_delim("data/evolution.csv",  ";", escape_double = FALSE, locale = locale(), trim_ws = TRUE)
test <- read_delim("data/test.csv", ";", escape_double = FALSE,
trim_ws = TRUE)
test$date <- as.Date(test$date, format="%d %B %Y")
downloadGithubData <- function() {
## Confirmés globales
download.file(
url      = "https://raw.githubusercontent.com/senegalouvert/COVID-19/master/data/zone_confirmes.csv",
destfile = "data/zone_confirmes.csv"
)
}
updateData <- function() {
if (!dir_exists("data")) {
dir.create('data')
downloadGithubData()
} else if ((!file.exists("data/zone_confirmes.csv")) || (as.double(Sys.time() - file_info("data/zone_confirmes.csv")$change_time, units = "hours") > 1)) {
downloadGithubData()
}
}
# Update with start of aapp
updateData()
zone_confirmes <- read_csv("data/zone_confirmes.csv")
manquant <- read_delim("data/zone_confirme_manquant.csv",
";", escape_double = FALSE, trim_ws = TRUE)
diakho <- zone_confirmes %>% select(DIAKHAO)
zone_confirmes <- zone_confirmes %>% select(-DIAKHAO)
names(zone_confirmes) <- names(manquant)
zone_confirmes <- cbind(zone_confirmes,diakho)
zone_confirmes <- zone_confirmes %>% mutate(THIES=THIES+DIAKHAO)
zone_confirmes <- zone_confirmes %>% select(-DIAKHAO)
zone_confirmes <- rbind(manquant,zone_confirmes )
#zone_confirmes <- zone_confirmes %>% bind_rows(manquant)
zone_confirmes$DATE <- as.Date(zone_confirmes$DATE)
zone_confirmes <- zone_confirmes %>% tidyr::gather("district", "cas", -DATE) %>% filter(!is.na(cas))
reg_dist <- read_delim("data/reg_dist.csv",
";", escape_double = FALSE, trim_ws = TRUE)
zone_confirmes <- zone_confirmes %>% full_join(reg_dist) %>% rename(date=DATE)
zone_confirmes_dist <- zone_confirmes
zone_confirmes <- zone_confirmes %>% filter(!is.na(cas) & !is.na(region))
zone_confirmes <-  zone_confirmes %>%
group_by(`hc-key`, region, date) %>% summarise(cas=sum(cas, na.rm = T)) %>% ungroup()
sca=zone_confirmes %>% filter(cas==max(cas))
sca$`hc-key`="ff"#sca$cas=600
zone_confirmes <-  zone_confirmes %>% filter(!is.na(date) & !is.na(`hc-key`))
zone_confirmes <- zone_confirmes %>% mutate(cas=ifelse(cas==0,NA, cas))
##Nouveau cas
evolution <- coronavirus %>% mutate(date=as.Date(date, format="%d/%m/%y")) %>%
arrange(date) %>%
mutate(new_conf=CONFIRMES - lag(CONFIRMES, 1, default = 0),
new_recov= GUERIS - lag(GUERIS, 1, default = 0),
new_death =DECES- lag(DECES, 1, default = 0),
new_actif=ACTIFS- lag(ACTIFS, 1, default = 0),
taux_death=DECES*100/CONFIRMES,
taux_gueri=GUERIS*100/CONFIRMES
) %>% ungroup()
View(coronavirus)
View(evolution)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
shiny::runApp()
install.packages(‘shinydashboard’)
install.packages("shinydashboard")
install.packages("shinydashboard")
shiny::runApp()
install.packages("RCurl")
runApp()
runApp()
shiny::runApp()
install.packages("reactable")
install.packages("reactable")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
clear()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(evolution)
View(evolution)
runApp()
runApp()
dataAtDate(max_date)$new_actif
dataAtDate(max_date)$new_actif[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(zone_confirmes)
runApp()
runApp()
runApp()
runApp()
View(zone_confirmes)
View(reg_dist)
runApp()
runApp()
View(reg_dist)
runApp()
runApp()
dataAtDate <- function(date1){
evolution %>% filter(date==date1)
}
runApp()
shiny::runApp()
View(zone_confirmes)
runApp()
max_date=max(evolution$date)
min_date=min(evolution$date)
runApp()
View(reg_dist)
View(zone_confirmes)
View(zone_confirmes_dist)
runApp()
runApp()
runApp()
View(zone_confirmes_dist)
View(zone_confirmes_dist)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
